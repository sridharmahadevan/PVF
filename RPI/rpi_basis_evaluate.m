function vPhi = rpi_basis_evaluate( cState, cAction, cBasis, cBasisSub, cPointsSub, cOpts, cNNInfo, cNumberOfActions, cActiveIdxs, cDomain )%% function vPhi = rpi_basis_evaluate( cState, cAction, cBasis, cBasisSub, cPointsSub, cOpts, cNNInfo, cNumberOfActions, cActiveIdxs )%% Evaluates basis functions at a set of states and actions. If the states are already known, it directly evaluates the basis functions% at those states, otherwise it extends them to the new states by interpolation.%% IN:%   cState      :   M by N matrix of M states in R^N, or M vector of indices of states%   cAction     :   Eithe a scalar, in which case it is the same for all M states in cState, or a M vector, one per state in cState%   cBasis      :   K by L matrix of all basis functions on all the known states%   cBasisSub   :   K by L' matrix of all basis functions on all the states initially used to build the basis%   cPointsSub  :   L' by N matrix of L' states in R^N used to build the basis cBasisSub%   cOpts       :   structure of options. Should contain the field%                   Rescaling   : N vector with dilation factors to apply in the N dimensions on each state%   cNNInfo     :   Nearest Neighbor info on the cBasisSub, to pass to FastSimpleNNInterp%   cNumberOfActions : Number of possible actions of the system%   cActiveIdxs :   Vector of indices of active basis functions%% OUT:%   vPhi        :   cNumberOfActions*K by N matrix of basis functions evaluated at the states in cState and actions in cAction.%                   These are computed by evaluating cBasis at the appropriate states if cState is an index set, otherwise they are%                   computed by extending the original basis functions cBasisSub to the new states in cState.%% DEPENDENCIES:%   FastSimpleNNInterp%% SC:%   MM  :   5/21/06%%% Mauro Maggioni% Yale University% www.math.yale.edu/~mmm82%lN = size(cBasis,1);% Evaluate the eigenfunctions at the new pointif size(cState,2)>1,    % Need to extrapolate eigenfunctions to a new point    cState = rpi_apply_rescaling( cState, cOpts.Rescaling );%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    if (nargin == 10)       if (strcmpi(cDomain, 'acrobot2') == 1)          cState = [sin(cState(:,1)) cos(cState(:,1)) sin(cState(:,2)) cos(cState(:,2)) cState(:,3:4)];       end              if (strcmpi(cDomain, 'cartpole') == 1)          cState = [cState(:,1:2), sin(cState(:,3)) cos(cState(:,3)) cState(:,4)];       end       %        if (strcmpi(cDomain,'bicycle') == 1)% %            cState = [sin(cState(:,1)) cos(cState(:,1)) cState(:,2) sin(cState(:,3)) cos(cState(:,3)) cState(:,4:5) sin(cState(:,6)) cos(cState(:,6)) cState(:,7:11)];% %        end    end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    for lk = 1:cNumberOfActions,        % FastLaplacianInterpEigenVecs would apply only if 'graph' option is used, it's Nystr\"om for eigenfunctions        lEvalPhi{lk} = FastSimpleNNInterp( cPointsSub, cState, cBasisSub( cActiveIdxs{lk},: ), cNNInfo );%(cAction(lk)-1)*lN+cActiveIdxs{lk},: ), cNNInfo );    end;        else    % This state has already been visited    for lk = 1:cNumberOfActions,        lEvalPhi{lk} = cBasis( cActiveIdxs{lk},cState ); %(cAction(lk)-1)*lN+cActiveIdxs{lk},cState );    end;end;% Compute the value of the basis functions at each state-actionvPhi = zeros(cNumberOfActions*lN,size(cState,1));% If only one action is specified, it's the same for all statesif length(cAction)==1,    vPhi( (cAction-1)*lN+cActiveIdxs{cAction},: ) = lEvalPhi{cAction};elseif length(cAction)==size(cState,1),    % otherwise it's one action per state    for lk = 1:length(cAction),        try        vPhi( (cAction(lk)-1)*lN+cActiveIdxs{cAction(lk)},lk) = lEvalPhi{cAction(lk)}(:,lk);        catch            fprintf('Ops!');        end;    end;else    warning('Error in rpi_basis_evaluate, actions specified incorrectly!');end;return;